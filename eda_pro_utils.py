
"""
eda_pro_utils.py
Author: Waseem
Description: ÿØŸàÿßŸÑ ÿ™ÿ≠ŸÑŸäŸÑ ÿßÿ≥ÿ™ŸÉÿ¥ÿßŸÅŸä ŸÖÿ™ŸÇÿØŸÖÿ© Ÿäÿ≥ÿ™ÿÆÿØŸÖŸáÿß ŸÖÿ≠ÿ™ÿ±ŸÅŸà ÿπŸÑŸÖ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ÿå ŸÖÿπ ÿ¥ÿ±ÿ≠ Ÿàÿ£ŸÖÿ´ŸÑÿ© ÿπŸÖŸÑŸäÿ©.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant
from ydata_profiling import ProfileReport

#1Ô∏è ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ£ÿπŸÖÿØÿ© ÿßŸÑÿ±ŸÇŸÖŸäÿ©
def get_numeric_columns(df):
    """
    ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿ£ÿ≥ŸÖÿßÿ° ÿßŸÑÿ£ÿπŸÖÿØÿ© ÿßŸÑÿ±ŸÇŸÖŸäÿ© ŸÅŸÇÿ∑ ŸÖŸÜ ÿßŸÑÿ¨ÿØŸàŸÑ.
    ŸÖÿ´ÿßŸÑ:
        num_cols = get_numeric_columns(df)
    """
    return df.select_dtypes(include='number').columns.tolist()


# 2Ô∏è ÿ™ÿ≠ŸÑŸäŸÑ Skew Ÿà Kurtosis
def check_skew_kurtosis(df):
    """
    ŸÅÿ≠ÿµ ÿßŸÑÿßŸÜÿ≠ÿ±ÿßŸÅ ÿßŸÑŸÖÿπŸäÿßÿ±Ÿä ŸàÿßŸÑÿ™ŸÅŸÑÿ∑ÿ≠ (ŸÑÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ™Ÿàÿ≤Ÿäÿπ ÿßŸÑÿ∑ÿ®ŸäÿπŸä).
    ŸÖŸÅŸäÿØ ŸÑŸÑŸÉÿ¥ŸÅ ÿπŸÜ ÿßŸÑÿ™Ÿàÿ≤Ÿäÿπÿßÿ™ ÿ∫Ÿäÿ± ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜÿ©.
    """
    print("üìê Skewness (ÿßŸÜÿ≠ÿ±ÿßŸÅ):")
    print(df.skew(numeric_only=True))
    print("\nüìè Kurtosis (ÿ™ŸÅŸÑÿ∑ÿ≠):")
    print(df.kurt(numeric_only=True))


# 3Ô∏è ÿ±ÿ≥ŸÖ ÿπŸÑÿßŸÇÿßÿ™ ÿ´ŸÜÿßÿ¶Ÿäÿ© ÿ®ŸäŸÜ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ (ŸÖÿπ ÿ™ŸÑŸàŸäŸÜ ÿ≠ÿ≥ÿ® ÿßŸÑŸÅÿ¶ÿ©)
def plot_pairwise_with_target(df, target):
    """
    ÿ±ÿ≥ŸÖ pairplot ÿ®ŸäŸÜ ŸÉŸÑ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑÿ±ŸÇŸÖŸäÿ© Ÿàÿ™ŸÑŸàŸäŸÜŸáÿß ÿ≠ÿ≥ÿ® target.
    ŸÖÿ´ÿßŸÑ:
        plot_pairwise_with_target(df, 'Gender')
    """
    sns.pairplot(df, hue=target)
    plt.show()


# 4Ô∏è Boxplot ÿ®ŸäŸÜ ÿπŸÖŸàÿØ ÿ™ÿµŸÜŸäŸÅŸä ŸàÿπŸÖŸàÿØ ÿ±ŸÇŸÖŸä
def boxplot_categorical_vs_numeric(df, cat_col, num_col):
    """
    ÿ±ÿ≥ŸÖ Boxplot ŸÑŸÑŸÖŸÇÿßÿ±ŸÜÿ© ÿ®ŸäŸÜ ŸÅÿ¶ÿ© ÿ™ÿµŸÜŸäŸÅŸäÿ© ŸàÿπŸÖŸàÿØ ÿ±ŸÇŸÖŸä.
    ŸÖÿ´ÿßŸÑ:
        boxplot_categorical_vs_numeric(df, 'Gender', 'Salary')
    """
    sns.boxplot(x=cat_col, y=num_col, data=df)
    plt.title(f"{num_col} by {cat_col}")
    plt.xticks(rotation=45)
    plt.show()


# 5Ô∏è ŸÅÿ≠ÿµ ÿ™ÿπÿØÿØ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑ Multicollinearity ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ VIF
def calculate_vif(df):
    """
    ÿ≠ÿ≥ÿßÿ® VIF ŸÑŸÉÿ¥ŸÅ ÿßŸÑÿ™ŸÉÿ±ÿßÿ± ÿßŸÑŸÇŸàŸä ÿ®ŸäŸÜ ÿßŸÑÿ£ÿπŸÖÿØÿ© (Multicollinearity).
    ŸÖŸÜÿßÿ≥ÿ® ŸÇÿ®ŸÑ ÿ®ŸÜÿßÿ° ŸÜŸÖÿßÿ∞ÿ¨ ÿßŸÑÿßŸÜÿ≠ÿØÿßÿ±.
    ŸÖÿ´ÿßŸÑ:
        calculate_vif(df)
    """
    X = add_constant(df.select_dtypes(include='number').dropna())
    vif_df = pd.DataFrame()
    vif_df["feature"] = X.columns
    vif_df["VIF"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]
    return vif_df


# 6Ô∏è ŸÜÿ≥ÿ®ÿ© ÿßŸÑŸÇŸäŸÖ ÿßŸÑŸÅÿ±ŸäÿØÿ© ŸÅŸä ŸÉŸÑ ÿπŸÖŸàÿØ
def unique_ratio(df):
    """
    ŸÅÿ≠ÿµ ŸÜÿ≥ÿ®ÿ© ÿßŸÑŸÇŸäŸÖ ÿßŸÑŸÅÿ±ŸäÿØÿ© ÿ•ŸÑŸâ ÿπÿØÿØ ÿßŸÑÿµŸÅŸàŸÅ ‚Äî ŸäŸÅŸäÿØ ŸÅŸä ŸÉÿ¥ŸÅ ÿßŸÑÿ£ÿπŸÖÿØÿ© ÿßŸÑÿ∫Ÿäÿ± ŸÖŸÅŸäÿØÿ©.
    ŸÖÿ´ÿßŸÑ:
        unique_ratio(df)
    """
    print("üßÆ Ratio of Unique Values:")
    for col in df.columns:
        ratio = df[col].nunique() / len(df)
        print(f"{col}: {ratio:.2%}")


# 7Ô∏è ÿßÿ±ÿ™ÿ®ÿßÿ∑ ŸÉŸÑ ÿπŸÖŸàÿØ ÿ±ŸÇŸÖŸä ÿ®ÿßŸÑŸáÿØŸÅ
def correlation_with_target(df, target_col):
    """
    ÿ≠ÿ≥ÿßÿ® ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ŸäŸÜ ÿßŸÑÿ£ÿπŸÖÿØÿ© ÿßŸÑÿ±ŸÇŸÖŸäÿ© ŸàÿπŸÖŸàÿØ ÿßŸÑŸáÿØŸÅ.
    ŸÖŸÅŸäÿØ ŸÑÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑŸÖÿ§ÿ´ÿ±ÿ© ŸÅŸä ÿßŸÑŸÜŸÖÿßÿ∞ÿ¨.
    ŸÖÿ´ÿßŸÑ:
        correlation_with_target(df, 'Survived')
    """
    corr = df.corr(numeric_only=True)[target_col].drop(target_col)
    print("üîó Correlation with target:")
    print(corr.abs().sort_values(ascending=False))


# 8Ô∏è heatmap ŸÖÿ™ŸÇÿØŸëŸÖ ÿπŸÜ ÿ∑ÿ±ŸäŸÇ cluster analysis
def cluster_correlation(df):
    """
    ÿ±ÿ≥ŸÖ Clustermap ŸÑÿπŸÑÿßŸÇÿßÿ™ ÿßŸÑÿ£ÿπŸÖÿØÿ© ÿßŸÑÿ±ŸÇŸÖŸäÿ© ÿ®ÿ¥ŸÉŸÑ ÿπŸÜŸÇŸàÿØŸä.
    ŸÖŸÖÿ™ÿßÿ≤ ŸÑŸÅŸáŸÖ ÿßŸÑÿ™ÿ¥ÿßÿ®Ÿá ÿ®ŸäŸÜ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™.
    ŸÖÿ´ÿßŸÑ:
        cluster_correlation(df)
    """
    sns.clustermap(df.corr(numeric_only=True), annot=True, cmap='vlag')
    plt.title("Clustered Correlation Heatmap")
    plt.show()


# 9Ô∏è ÿ™ŸàŸÑŸäÿØ ÿ™ŸÇÿ±Ÿäÿ± ÿ™ŸÅÿßÿπŸÑŸä ŸÉÿßŸÖŸÑ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ydata_profiling
def generate_profile(df, output_file='eda_report.html'):
    """
    ÿ•ŸÜÿ¥ÿßÿ° ÿ™ŸÇÿ±Ÿäÿ± ÿ¥ÿßŸÖŸÑ ÿ™ŸÑŸÇÿßÿ¶Ÿä ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ydata_profiling.
    Ÿäÿ™ÿ∑ŸÑÿ®:
        pip install ydata-profiling
    ŸÖÿ´ÿßŸÑ:
        generate_profile(df)
    """
    profile = ProfileReport(df, title="EDA Report", explorative=True)
    profile.to_file(output_file)


# 10 ŸÉÿ¥ŸÅ ÿßŸÑÿ£ÿπŸÖÿØÿ© ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ£ŸÜŸàÿßÿπ ŸÖÿÆÿ™ŸÑŸÅÿ© ÿØÿßÿÆŸÑŸáÿß
def check_mixed_types(df):
    """
    ŸÅÿ≠ÿµ ÿßŸÑÿ£ÿπŸÖÿØÿ© ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ£ŸÜŸàÿßÿπ ÿ®ŸäÿßŸÜÿßÿ™ ŸÖÿÆÿ™ŸÑŸÅÿ© (ŸÖÿ´ŸÑ ÿ£ÿ±ŸÇÿßŸÖ + ŸÜÿµŸàÿµ).
    ŸÖŸÖÿ™ÿßÿ≤ ŸÑŸÑŸÉÿ¥ŸÅ ÿπŸÜ ÿ£ÿπÿ∑ÿßŸÑ ŸÅŸä ÿßŸÑÿ•ÿØÿÆÿßŸÑ.
    ŸÖÿ´ÿßŸÑ:
        check_mixed_types(df)
    """
    for col in df.columns:
        unique_types = df[col].dropna().map(type).nunique()
        if unique_types > 1:
            print(f"‚ö†Ô∏è Column '{col}' has mixed data types")
